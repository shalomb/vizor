#!/bin/bash

# SYNOPSIS
#   Provision a VM given a template and provider definition

# TODO
#   Make this generic for non-windows OSes

source defaults.sh
source colours.sh
source utils.sh
source mount.utils.sh
source razor.sh

while getopts ":t:p:" opt; do
  case $opt in
    t) template="$OPTARG"
    ;;
    p) provider="$OPTARG"
    ;;
  esac
done

[[ ${template:-} ]] || { die "No template (-t) defined."; };
[[ ${provider:-} ]] || { die "No provider (-p) defined."; };

cat <<EOF
           template : $template
           provider : $provider
EOF

candidate_template=( $( vizor windows template  list "$template" ) )

if (( ${#candidate_template[@]-} != 1 )); then
  for c in ${candidate_template[@]-}; do
    echo " * template : $c" >&2
  done
  die "${#candidate_template[@]-} templates found for regex '$template' .. cannot proceed."
fi

candidate_provider=( $( vizor xenserver vm-container  list "$provider" ) )

if (( ${#candidate_provider[@]-} != 1 )); then
  for c in ${candidate_provider[@]-}; do
    echo " * provider : $c" >&2
  done
  die "${#candidate_provider[@]-} providers found for regex '$provider' .. cannot proceed."
fi

set -xv
provider_metadata=$(mktemp)
vizor xenserver vm-container  show "$provider" > "$provider_metadata"

node_metadata=$(mktemp)
{ vizor windows   template      show site.conf
  vizor windows   template      show "$template"
} > "$node_metadata"

set -a

# Get config from .conf files
source "$node_metadata"
source "$provider_metadata"

# Allow for the user to override at the command line
for f in "$@"; do
  if [[ $f = *'='* ]]; then
    k="${f%%=*}"
    v="${f#*=}"
    printf -v "$k" "$v"
  fi
done

[[ -n $key   ]] || { die "No key set in template '$template'.";    }
[[ -n $value ]] || { die "No value set in template '$template'.";  }

image_metadata=$(mktemp)
vizor windows image show '_record if '"$key"' =~ /'"${value//[\/+]/.}"'/' | \
  sed -r -e 's/ : /=/' -e 's/,$//' | grep -vi '[{}]' > "$image_metadata"

source "$image_metadata"

node_suffix="$(date +'%Y%m%d').$(head -c 4 < /proc/sys/kernel/random/uuid)"
[[ ${vm_name:-} ]] || vm_name="$vstring-$node_suffix"
echo vm_name="'$vm_name'" >> "$provider_metadata"

repo="$vstring"
task="winpe-${architecture}"

cat <<EOF
      install_image : $install_image
       architecture : $architecture
           iso_file : $iso_file
               repo : $repo
               task : $task
EOF

# FIXME : Workaround until razor supports importing local ISOs 
# Creating an empty ISO
empty_iso_d="$(mktemp -d)"
empty_iso="/mnt/iso-src/${iso_file//[\/\ ]/_}.empty.iso"
genisoimage -o "$empty_iso" "$empty_iso_d" &>/dev/null
rmdir "$empty_iso_d"

# Create our repo
# razor delete-repo --name "$repo" || true
razor create-repo --iso-url "file://$empty_iso" \
                  --task    "$task" --name    "$repo"

# Mount the ISO for the repo
mount -o loop,ro "$iso_file" /var/lib/razor/repo-store/"$repo" || true

# Create the VM but don't start it
vm_def=$(mktemp)
"$hypervisor" '
  tmpfile=$(mktemp); cat -> "$tmpfile";
  set -a
  TERM="rxvt"
  source "$tmpfile"
  xe_vm_create -S
  rm "$tmpfile"
' < "$provider_metadata" > "$vm_def"

mac_address=$( grep_kvf 'print mac_address' < "$vm_def" )
    vm_uuid=$( grep_kvf 'print vm_uuid'     < "$vm_def" )

# Prepare Razor for the VM to call in
node_def=$(mktemp)
vizor razor node prepare -m "$mac_address" -u "$vm_uuid" \
  -r "$repo" -t "$task" > "$node_def"

node_name=$( grep 'Node Name' "$node_def" | grep_kvf 'print node_name' )
rm -f "$node_def"

node_metadata_doc=$(mktemp)
cat <<EOF > "$node_metadata_doc"
{
    "node": "$node_name",
    "no_replace": false,
    "update": {
    }
}
EOF

json=

for k in \
    vstring               \
    name                  \
    default_language      \
    architecture          \
    installation_type     \
    major_version         \
    minor_version         \
    build                 \
    service_pack_level    \
    service_pack_build    \
    display_name          \
    display_description   \
    languages             \
    ctime         \
    mtime         \
    description           \
    edition_id            \
    flags                 \
    hal                   \
    id                    \
    index                 \
    product_name          \
    product_suite         \
    product_type          \
    system_root           \
  ; do
  value="${!k:-}"; [[ -n $value ]] && value="${value//\"/\\\\\"}"
  printf -v str '"%s" : "%s",' "$k" "$value"
  json="$json$str"
done

while read -r k; do 
  printf -v str '"%s" : "%s",' "$k" "${!k:-}"
  json="$json$str"
done < <( 
    sed -r -e '/^$/d' -e '/^#/d' "$node_metadata" | \
      awk -F= '{print $1}'
  )
 
json="${json%%,}"

[[ $json ]] && sed -i "/update/a $json" "$node_metadata_doc"

razor modify-node-metadata --json "$node_metadata_doc"

# Start the VM
"$hypervisor" -t <<EOF
  xe vm-start uuid="$vm_uuid"
EOF

rm "$node_metadata" "$node_metadata_doc"

