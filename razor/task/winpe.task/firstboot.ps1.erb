# PowerShell

Set-StrictMode -Version 2.0
Set-PSDebug -Trace 0

$ErrorActionPreference = 'STOP'
$PSModuleAutoLoadingPreference='None'

# Import PoSH modules incase they may not be loaded
# early in the first boot
Import-Module Microsoft.PowerShell.Host       -ea 0
Import-Module Microsoft.PowerShell.Management -ea 0
Import-Module Microsoft.PowerShell.Utility    -ea 0

$ScriptDir = ([IO.FileInfo]($MyInvocation.MyCommand.Name)).Directory.FullName

Write-Host -Fore Cyan "Begin firstboot script"

# Install-Prerequisites
# Download scripts and packages from razor
& .\Install-Prerequisites.ps1


# Create powershell script to set up the environment for the sequences
# to run in. This script will be registered as a logon script so that it is
# re-invoked after reboots.
$PSCmdLet = @'
# Resume-ImagePrep.ps1

Set-StrictMode -Version 2.0
$ErrorActionPreference = 'STOP'
$PSModuleAutoLoadingPreference='None'

Set-PSDebug -Trace 0

Import-Module Microsoft.PowerShell.Host       -ea 0
Import-Module Microsoft.PowerShell.Management -ea 0
Import-Module Microsoft.PowerShell.Utility    -ea 0

$ScriptDir = ([IO.FileInfo]($MyInvocation.MyCommand.Name)).Directory.FullName
cd ($Env:IPBaseDir=$ScriptDir)

$Env:Path+=";$Env:IPBASEDIR;$Env:IPBASEDIR\bin;$PWD"
$Env:PSModulePath+=";$Env:IPBASEDIR;$Env:IPBASEDIR\Modules;$PWD;$PWD\Modules;"

Import-Module SystemUtils
Import-Module ImageMaintenance

Write-Host -Fore Cyan "Resume-ImageMaintenance ({0}) STAGE START"

$Env:IPBootScript = ([IO.FileInfo]($MyInvocation.MyCommand.Name)).FullName
ImageMaintenance\Resume-ImageMaintenance -Sequence {0} -Verbose

$ErrorActionPreference = 'CONTINUE'

$ShutDownMsg = "Resume-ImageMaintenance ({0}) STAGE END"
Write-Host -Fore Cyan $ShutDownMsg

# TODO, workaround for win7/2008 failing to reboot the machine
#       as requested at the end of stage 0.

sleep 30
$ShutDownMsg = "No action after timeout, rebooting machine.."

Write-Verbose $ShutdownMsg
shutdown.exe -a
sleep 5
shutdown.exe -r -c $ShutdownMsg
sleep 5
Restart-Computer
sleep 5
shutdown.exe -a
sleep 5
Restart-Computer -Force
Write-Warning "Shutdown attempt failed : $_"

'@

# TODO, The hardcoded strings here should be passed in through razor
#       metdata.
$SequenceFile = Join-Path $PWD 'nodeprep.seq.ps1'
$PSCmdLet = $PSCmdLet -f $SequenceFile
$PsFile = Join-Path $PWD 'Resume-ImagePrep.ps1'
$PSCmdLet | Out-File -encoding ASCII $PsFile -Force


# Create batch file wrapper for the above powershell script.
# This gets around powershell execution policy differences in the different
# OSes and lets us control the properties of the console window hosting
# the image preparation process

$CmdLet = @'
:: cmd.exe
@echo off

mode con:cols=112 lines=9999
mode con:cols=112 lines=32766

:: Resume-ImagePrep.cmd

prompt . 
@echo on

setlocal enabledelayedexpansion

set THISDIR=%~dp0
cd !THISDIR!

if not exist Resume-ImagePrep.ps1 (
  del %0
  exit
)

start "Resume-ImagePrep.ps1" /b /wait /max /realtime cmd.exe /k !SystemRoot!\System32\WindowsPowerShell\v1.0\powershell.exe -noninteractive -noprofile -nologo -executionpolicy bypass -file Resume-ImagePrep.ps1

cd !THISDIR!
exit /b !ERRORLEVEL!
'@

# Create the runner script wrapping the above powershell script
# and register it to run at every boot - until deleted.
$CmdFile = Join-Path $PWD 'Resume-ImagePrep.cmd'
$CmdLet   | Out-File -encoding ASCII $CmdFile -Force
reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /f /v $CmdFile /t REG_SZ /d $CmdFile


# Create convenience script to enter IP shell when debugging
"\ProgramData\firstboot\Bootstrap\Invoke-ImagePrep.cmd" | Out-File -encoding ASCII '\ip.cmd'


# Start runner
try {
  & $CmdFile
} catch {
  Write-Error "'$PSFile' : $_"
  sleep 60
  Restart-Computer
}

Write-Host -Fore Cyan "End firstboot script"

