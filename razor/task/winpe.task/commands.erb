<%=
require "json"
require "net/http"
require "uri"
require "base64"

cmd_set_json  = ('%s.json' % @cmd_set)
uri           = URI.parse(file_url(cmd_set_json, true))

http    = Net::HTTP.new(uri.host, uri.port)
request = Net::HTTP::Get.new(uri.request_uri)

response = http.request(request)

def gen_powershell_encodedcommand (command, test=1, cleanup=1)

  log_filename = '%s-%s-%s.log' % 
                    [@cmd_set, @cmd_order, command.gsub(/[^\w\d\-\_]/, '_')]

  command_str = <<-eos
    $logDir = "$Env:PROGRAMDATA\\imageprep\\log"
    mkdir $logDir -Force | out-null
    Start-Transcript -Path (Join-Path $logDir #{log_filename})

    Write-Host -Fore Cyan "#{command}"
    
    cd $Env:TEMP

    try { #{test}    ; 1;     } catch { exit 1 }
    try { #{command} ; $ec=0; } catch { exit 1 }
    try { #{cleanup} ; 1;     } catch { exit 1 }
eos

  converter = Encoding::Converter.new('UTF-8', 'UTF-16LE')
  # command_str = "\xFF\xFE".force_encoding('UTF-16LE') + converter.convert(command_str)
  command_str = converter.convert(command_str)
  return (Base64.encode64(command_str).gsub(/\n/, '')).encode(:xml => :text)
end

if response.code == "200"
  json = JSON.parse(response.body, {:symbolize_names => true})
  
  xml_fragments = Array.new()

  json.each do |doc|
    command_def = doc[1].collect{ |node|
      if @cmd_pass == 'oobeSystem' 
      <<-eos
        <SynchronousCommand wcm:action="add">
          <Order>#{@cmd_order+=1}</Order>
          <Description>#{(node[:description] || node[:command]).encode(:xml => :text)}</Description>
          <CommandLine>powershell.exe -executionpolicy bypass -nologo -noprofile -encodedcommand '#{
              gen_powershell_encodedcommand node[:command], node[:test], node[:cleanup]
          }'</CommandLine>
          <RequiresUserInput>#{(node[:requires_input] || false).to_s.encode(:xml => :text)}</RequiresUserInput>
          #{
            if node[:requires_reboot]
              '<!-- %s WillReboot (%s) ignored, not valid for this pass -->' % [@cmd_pass, node[:requires_reboot]]
            end
          }
        </SynchronousCommand>
eos
      else
      <<-eos
        <RunSynchronousCommand wcm:action="add">
          <Order>#{@cmd_order+=1}</Order>
          <Description>#{(node[:description] || node[:command]).encode(:xml => :text)}</Description>
          <Path>powershell.exe -executionpolicy bypass -nologo -noprofile -encodedcommand '#{
              gen_powershell_encodedcommand node[:command], node[:test], node[:cleanup]
            }'</Path>
          #{
            '<WillReboot>%s</WillReboot>' % (node[:requires_reboot] ? 'OnRequest' : 'Never')
          }
          #{ 
            if node[:requires_input]
              '<!-- %s RequiresUserInput (%s) ignored, not valid for this pass -->' % [@cmd_pass, node[:requires_input]]
            end
          }
        </RunSynchronousCommand>
eos
      end
    }
    xml_fragments.push(command_def)
  end

  xml_fragments.join()

else
  puts "ERROR!!!"
end
%>
