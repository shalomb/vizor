# powershell
Set-StrictMode -Version 2.0
Set-PSDebug -Trace 0
$ErrorActionPreference="STOP"

# Init
Import-Module CDROM               -Verbose:$VerbosePreference
Import-Module DesktopUtilities    -Verbose:$VerbosePreference
Import-Module DesktopUtils        -Verbose:$VerbosePreference
Import-Module GroupPolicy         -Verbose:$VerbosePreference
Import-Module HyperVIC            -Verbose:$VerbosePreference
Import-Module Locale              -Verbose:$VerbosePreference
Import-Module MSRT                -Verbose:$VerbosePreference
Import-Module OSRegion            -Verbose:$VerbosePreference
Import-Module PSDUtils            -Verbose:$VerbosePreference
Import-Module RegistryUtils       -Verbose:$VerbosePreference
Import-Module RDP                 -Verbose:$VerbosePreference
Import-Module Robocopy            -Verbose:$VerbosePreference
Import-Module ScriptHost          -Verbose:$VerbosePreference
Import-Module StartupAndRecovery  -Verbose:$VerbosePreference
Import-Module SysInternals        -Verbose:$VerbosePreference
Import-Module Sysprep             -Verbose:$VerbosePreference
Import-Module SystemPolicy        -Verbose:$VerbosePreference
Import-Module SystemRestore       -Verbose:$VerbosePreference
Import-Module SystemUtils         -Verbose:$VerbosePreference
Import-Module TaskUtils           -Verbose:$VerbosePreference
Import-Module TimeUtils           -Verbose:$VerbosePreference
Import-Module UserLogon           -Verbose:$VerbosePreference
Import-Module UsersAndGroups      -Verbose:$VerbosePreference
Import-Module VDIOptimizations    -Verbose:$VerbosePreference
Import-Module WindowsActivation   -Verbose:$VerbosePreference
Import-Module WindowsDefender     -Verbose:$VerbosePreference
Import-Module WindowsUpdate       -Verbose:$VerbosePreference
Import-Module WinMgmt             -Verbose:$VerbosePreference
Import-Module XenTools            -Verbose:$VerbosePreference
Import-Module ZipUtils            -Verbose:$VerbosePreference

# Import-Module PSRemoteRegistry      -Verbose -Force
# Import-Module PsUrl                 -Verbose -Force

# Define the environment for the run
$Env:OLBASE = "$Env:SystemDrive\OneLab"
$Env:OLCONF = Join-Path $Env:OLBASE "conf"
$Env:OLBIN  = Join-Path $Env:OLBASE "bin"
$Env:OLLOG  = Join-Path $Env:OLBASE "log"
$Env:OLIP   = Join-Path $Env:OLLOG  "ImagePrep"
$Env:KMS_SERVER = 'camesvwkms01.eng.citrite.net'
$Env:KMS_PORT = '1688'

if ( (Test-Path "SysInternals") ) { $Env:PATH += "$($PWD.ProviderPath)\SysInternals;" }
$Env:PATH += "$Env:OLBIN;$Env:IPBaseDir\SysInternals"


# Tasks Outstanding
#  run clr_optimization_v2.0* to completion


# Stage 0
@(
  @{ name    =   'ensure_monitor_resolution_of_1024x768';
      script = {
        $DefaultMonitor = @(Gwmi Win32_DesktopMonitor)[0]
        if ( $DefaultMonitor.ScreenWidth -and $DefaultMonitor.ScreenHeight ) {
          if ( ($DefaultMonitor.ScreenWidth -lt 1024) -or ($DefaultMonitor.ScreenHeight -lt 768) ) {
            throw "Monitor resolution is too low. Ensure minimum of 1024x768."
          }
        }
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'remove_asfsupport_startuptasks';
      script = { Get-StartupCommand | ?{ $_.Command -imatch "ASF" } | Uninstall-StartupCommand -Verbose };
      pre    = { Get-StartupCommand | ?{ $_.Command -imatch "ASF" } };
      post   = { 1; }; }
  @{ name    =   'remove_asfsupport_dir';
      script = { rm -Recurse -Force -Verbose "C:\ASFSupport" };
      pre    = { Test-Path "C:\ASFSupport" };
      post   = { -not(Test-Path "C:\ASFSupport") }; }
  @{ name    =   'create_onelab_support_directory_hierarchy';
      script = {
        $Env:OLBASE,$Env:OLCONF,$Env:OLBIN,$Env:OLLOG,$Env:OLIP | %{
          mkdir -Force -Verbose $_ | Out-Null
        }
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'set_bginfo_desktop_backdrop';
      script = {
        cp (Join-Path $Env:IPBaseDir "SysInternals\bginfo.exe") "$Env:OLBIN" -Verbose -Force
        $bgifile = (Resolve-Path (Join-Path $Env:IPBaseDir "conf\*.bgi")).ProviderPath 
        cp $bgifile $Env:OLCONF -verbose -force
        $bgifile = (Resolve-Path (Join-Path "$Env:OLCONF" "*.bgi")).ProviderPath 
        $bginfocmd = Join-Path $Env:OLBIN "bginfo.cmd"
        "set PATH=%PATH%;%~dp0\"                          | Out-File -Encoding ASCII $bginfocmd
        "reg.exe add HKCU\SOFTWARE\Sysinternals\BGInfo /v EulaAccepted  /t REG_DWORD /d 1 /f" | Out-File -Encoding ASCII $bginfocmd -Append
        "bginfo.exe /nolicprompt /timer:0 $bgifile"       | Out-File -Encoding ASCII $bginfocmd -Append
        Install-GlobalLogonScript $bginfocmd
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'set_powershell_local_machine_execution_policy_remotesigned';
      script = { 
        try {
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine -Force -Verbose -ErrorVariable SEPEV
        } catch {
          if ( -not($SEPEV -imatch 'updated.*successfully') ) {
            throw
          }
        }
      };
      pre    = { -not( ($cep = Get-ExecutionPolicy -Scope LocalMachine) -imatch 'RemoteSigned' ) };
      post   = { 1 }; }
  @{ name    =   'set_ntp_servers';
      script = { Set-NTPServers eng.citrite.net,citrite.net,pool.ntp.org,time.windows.com,time.nis.gov -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'sync_ntp_time_stage_0';
      script = { Sync-W32Time };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'deregister_automation_startup_script';
      script = { 
        Get-StartupCommand -Verbose | ?{ $_.Command -imatch "StartupTasks.cmd" }
        Get-StartupCommand -Verbose | ?{ $_.Command -imatch "StartupTasks.cmd" } | Uninstall-StartupCommand -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'delete_automation_startup_script';
      script = { Get-StartupCommand | ?{ $_.Command -imatch "StartupTasks.cmd" } | %{ rm $_.Command -Force -Verbose } };
      pre    = { 1 };
      post   = { Get-StartupCommand | ?{ $_.Command -imatch "StartupTasks.cmd" } | ?{ -not(Test-Path $_) }}; }
  @{ name    =   'install_automation_bootstrap_scripts';
      script = { "StartupTasks.cmd","Start-AsyncAsfDiscovery.ps1" | %{ copy -Force -Verbose (Join-Path "StartupTasks" "$_") $Env:OLBIN } };
      pre    = { 1 };
      post   = { "StartupTasks.cmd","Start-AsyncAsfDiscovery.ps1" | %{ Test-Path (Join-Path $Env:OLBIN "$_") } };
      }
  @{ name    =   'register_automation_startup_script';
      script = { Install-GlobalLogonScript "$Env:OLBIN\StartupTasks.cmd" -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'deregister_imageprep_startup_script';
      script = { Get-StartupCommand | ?{ $_.Command -imatch "Invoke-ImagePrep.cmd" } | Uninstall-StartupCommand -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_crash_control_crash_dump_full';
      script = { Enable-CrashControlCrashDump -Value 1 -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_crash_control_nmi_crash_dump';
      script = { Enable-NMICrashDump -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_crash_control_autoreboot';
      script = { Enable-CrashControlAutoReboot -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_crash_control_dump_file_overwrite';
      script = { Enable-CrashControlDumpFileOverWrite -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_crash_control_send_alert';
      script = { Enable-CrashControlSendAlert -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_crash_control_log_system_event';
      script = { Enable-CrashControlLogEvent -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_crash_control_always_keep_memory_dump';
      script = { Enable-CrashControlAlwaysKeepMemoryDump -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'register_imageprep_startup_script';
      script = { 
        $ipWrapper="$Env:OLBIN\Invoke-ImagePrep.cmd"
        $ip=([System.IO.FileInfo](Resolve-Path (Join-Path $Env:IPBaseDir "BootStrap/Invoke-ImagePrep.cmd")).ProviderPath).FullName;
        Write-Verbose "Creating cmd $ipWrapper to $ip"
        $ip | Out-File -Verbose -Force -Encoding ASCII -PSPath $ipWrapper;
        Install-GlobalLogonScript $ipWrapper -Verbose;
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_first_logon_animations';
      script = { Disable-FirstLogonAnimations };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'uninstall_msmsgs_startup_commands';
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^(?:5)')){ Write-Warning 'Not on Windows XP.' } };
      script = { Get-StartupCommand | ?{ $_.Caption -imatch 'msmsgs' } | Uninstall-StartupCommand -Verbose };
      post   = { 1 }; }
  @{ name    =   'uninstall_ctfmon_startup_commands';
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^(?:5)')){ Write-Warning 'Not on Windows XP.' } };
      script = { Get-StartupCommand | ?{ $_.Caption -imatch 'ctfmon.exe' } | Uninstall-StartupCommand -Verbose };
      post   = { 1 }; }
  @{ name    =   'uninstall_welcomecenter_startup_commands';
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^(?:5\.0|6\.0)')){} };
      script = { Get-StartupCommand | ?{ $_.Caption -imatch 'welcomecenter' } | Uninstall-StartupCommand -Verbose };
      post   = { 1 }; }
  @{ name    =   'uninstall_sidebar_startup_commands';
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^6\.[01]')){ Write-Warning 'Not on Windows Vista/7.' } };
      script = { Get-StartupCommand | ?{ $_.Caption -imatch 'sidebar' } | Uninstall-StartupCommand -Verbose };
      post   = { 1 }; }
  @{ name    =   'uninstall_windows_defender_startup_commands';
      pre    = { 1 };
      script = { Get-StartupCommand | ?{ $_.Caption -imatch 'windows defender' } | Uninstall-StartupCommand -Verbose };
      post   = { 1 }; }
  @{ name    =   'install_ipv6_on_xp_2003';
      script = { & ipv6.exe install };
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^5\.1')){ throw 'Not on Windows XP/2003.' } };
      post   = { 1 }; }
  @{ name    =   'disable_server_manager';
      script = { Disable-ServerManager -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'set_high_performance_power_scheme';
      script = { Set-PowerSchemeOptimizations -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_remote_desktop';
      script = { Disable-RemoteDesktop -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_windows_sidebar';
      script = { Disable-WindowsSidebar -Verbose };
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^6\.0')){ throw 'Not on Windows Vista.' } };
      post   = { 1 }; }
  @{ name    =   'set_w32tm_service_autostart';
      script = {  Get-Service -Name W32Time | Set-Service -StartupType Automatic -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_screensaver';
      script = { Disable-ScreenSaver -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'create_local_administrator';
      script = { New-LocalAdministrativeUser -Username "Administrator" -Password "***REMOVED***" -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  # Backup administrator
  @{ name    =   'create_local_administrator_citrix';
      script = { New-LocalAdministrativeUser -Username "citrix" -Password "***REMOVED***" -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  # TODO: This is currently broken, is is needed?
      # @{ name    =   'install_asf_support_libs';
      #     script = { Install-ASFSupportLib };
      #     pre    = { 1 };
      #     post   = { 1 }; }
  # TODO: This is currently broken, fix to use tools remotely
      # @{ name    =   'install_sysinternals_tools';
      #     script = { Install-SysInternalsTools };
      #     pre    = { 1 };
      #     post   = { 1 }; }
  @{ name    =   'initialize_sysinternals_tools';
      script = { Initialize-SysInternals };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_system_restore';
      script = { Disable-SystemResoreOnLocalDrives -ea 0 };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'set_cscript_as_wsh_host';
      script = { Set-WSHScriptHost "CScript" };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_show_desktop_on_logon';
      script = { Enable-ShowDesktopOnLogon };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'update_powershell_help';
      script = { Update-Help -Verbose };
      pre    = { $psver=$PSVersionTable.PSversion; if (-not($psver -ge 3.0)){ throw 'Not on PowerShell >= 3.0.' } };
      post   = { 1 }; }
  @{ name    =   'enable_windows_updates';
      script = { Enable-WindowsUpdates };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'install_dotnet35_on_2008r2';
      script = { if (-not(Test-Path "$Env:WINDIR\Microsoft.Net\Framework*\v3*")) { 
                    Import-Module ServerManager -Verbose; Add-WindowsFeature as-net-framework -verbose 
                  }  
      };
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^6.1.7601')){ throw 'Not on Windows 2008 R2.' } };
      post   = { 1 }; }
  @{ name    =   'install_windows_updates';
      script = { Search-WindowsUpdate -ImportantOnly -Verbose | Install-WindowsUpdate -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'invoke_windows_defender_signature_update';
      script = { Invoke-WindowsDefenderUpdate -Verbose };
      pre    = { $os = gwmi win32_operatingsystem; if ($os.version -imatch '^(?:6\.[1-9])'){ throw 'On Windows 8.1/2012R2.' } };
      post   = { 1 }; }
  @{ name    =   'disable_windows_updates';
      script = { Disable-WindowsUpdates };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_screen_savers';
      script = { Disable-ScreenSaver };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_auto_reboot_on_system_failure';
      script = { Disable-AutoRebootOnSystemFailure };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'set_user_preferences';
      script = { Set-UserPreferences -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_device_autorun';
      script = { Disable-AutoRun };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_non-essential_scheduled_tasks';
      script = { Disable-NonEssentialScheduledTasks };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_non-essential_services';
      script = { Disable-NonEssentialServices };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_hibernation';
      script = {  try { & powercfg.exe -h off } catch {} };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_automatic_managed_pagefile';
      script = { Disable-AutomaticManagedPagefile -verbose };
      pre    = { $os = gwmi win32_operatingsystem; if ($os.version -imatch '^5\.1'){ throw 'On Windows XP/2003.' } };
      post   = { 1 }; }
  @{ name    =   'enable_clear_pagefile_at_shutdown';
      script = { Enable-ClearPagefileAtShutdown -verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'delete_pagefiles';
      script = { Get-Pagefile | Remove-Pagefile -verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_automatic_administrative_login';
      script = { Set-AutoAdminLogon -DefaultUserName "Administrator" -DefaultPassword "***REMOVED***" -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
),


# Stage 1
@(
  @{ name    =   'restart_for_stage_2';
      script = { & shutdown.exe -r -t 2 };
      pre    = { 1 };
      post   = { 1 }; }
),


# Stage 2
@(
  @{ name    =   'set_timezone_gmt';
      pre    = { (Gwmi Win32_TimeZone) -imatch '^GMT Standard Time$' };
      script = { Get-TimeZone -TimeZoneName "GMT Standard Time" | Set-TimeZone -Verbose };
      post   = { (Gwmi Win32_TimeZone) -imatch '^GMT Standard Time$' }; }
  @{ name    =   'uninstall_browserchoice_startup_command';
      pre    = { 1 };
      script = { Get-StartupCommand | ?{ $_.Caption -imatch 'BrowserChoice' } | Uninstall-StartupCommand -Verbose };
      post   = { 1 }; }
  @{ name    =   'sync_ntp_time_stage_2';
      script = { Sync-W32Time };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'install_taskbar_shortcut_items';
      script = { @("powershell", "cmd", "taskmgr", "eventvwr", "mmc","psr") | %{ try { Install-DesktopShortcut -Command "$_" } catch {} } };
      pre    = { 1; };
      post   = { 1 }; }
  @{ name    =   'set_kms_server'; 
      script = { & slmgr.vbs -skms "${Env:KMS_SERVER}:${Env:KMS_PORT}" };
      pre    = { $os = gwmi win32_operatingsystem; if ($os.version -imatch '^5\.1'){ throw 'On Windows XP/2003.' } };
      post   = { 1 }; }
  @{ name    =   'activate_windows';
      script = { Invoke-WindowsActivation };
      pre    = { 1 };
      post   = { 1 }; }
      # # TODO, this may be broken
      # @{ name    =   'reset_host';
      #     script = { Reset-Host };
      #     pre    = { 1 };
      #     post   = { 1 }; }
  @{ name    =   'perform_ngen_on_powershell_assemblies';
      script = { Start-NgenTasks -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'invoke_winmgmt_repository_reset';
      script = { Invoke-WinMgmt -ResetRepository };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'invoke_winmgmt_repository_verify';
      script = { Invoke-WinMgmt -VerifyRepository };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'invoke_windows_defender_full_scan';
      script = { Invoke-WindowsDefenderScan -Full -Verbose };
      pre    = { $os = gwmi win32_operatingsystem; if ($os.version -imatch '^(?:6\.[1-9])'){ throw 'On Windows 8.1/2012R2.' } };
      post   = { 1 }; }
  @{ name    =   'collect_windows_defender_files';
      script = { Invoke-WindowsDefenderCommand -MPCmdRunArgs @('-GetFiles') -Verbose };
      pre    = { $os = gwmi win32_operatingsystem; if ($os.version -imatch '^(?:6\.[1-9])'){ throw 'On Windows 8.1/2012R2.' } };
      post   = { 1 }; }
  @{ name    =   'remove_hiberfil.sys';
      script = {
        Gwmi Win32_LogicalDisk | ?{ $_.DriveType -eq 3 } | ?{ 
          Test-Path (Join-Path $_.DeviceID 'hiberfil.sys') 
        } | %{ rm -Force -Verbose (Join-Path $_.DeviceID 'hiberfil.sys') }
      };
      pre    = { 1 };
      post   = {
        Gwmi Win32_LogicalDisk | ?{ $_.DriveType -eq 3 } | ?{ 
          if (Test-Path (Join-Path $_.DeviceID 'hiberfil.sys')) {
            Throw "$($_.DeviceID)\hiberfil.sys found."
          }
        }
      }; }
  @{ name    =   'purge_local_user_profiles'; 
      script = { 
        Get-UserProfile | ?{ 
          ($_.SID.Length -gt 40) -and ($_.UserName -ne (Join-Path $Env:COMPUTERNAME $Env:USERNAME)) 
        } | Remove-UserProfile -Verbose
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'clear_bitsadmin_cache'; 
      script = { & bitsadmin.exe /cache /clear };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'remove_temp_files'; 
      script = { rm -Force -Verbose -Recurse (Join-Path $Env:TEMP '*') };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'remove_windows_temp_files'; 
      script = { rm -Force -Verbose -Recurse (Join-Path $Env:WINDIR 'TEMP\*') };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'remove_windows_downloaded_program_files'; 
      script = { rm -Force -Verbose -Recurse (Join-Path $Env:WINDIR 'Downloaded Program Files\*') };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'remove_windows_prefetch_files'; 
      script = { rm -Force -Verbose -Recurse (Join-Path $Env:WINDIR 'Prefetch\*') };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'invoke_dism_service_pack_cleanup';
      script = { & dism.exe /online /cleanup-image /spsuperseded };
      pre    = { Get-Command dism.exe -ea 1 };
      post   = { 1 }; }
  @{ name    =   'remove_ntuninstall_files'; 
      script = { 
        ls -ea 0 -Force (Join-Path $Env:WINDIR '$NT*install*') -Recurse | %{
          rm -ea 0 -Recurse -Force -Verbose $_ 
        }
      };
      pre    = { ls (Join-Path $Env:WINDIE '$NT*install*') -ea 1 };
      post   = { 1 }; }
  @{ name    =   'remove_software_distribution_download_files';
      script = { 
        Get-Service *inst* | Stop-Service -Verbose -ea 0
        Sleep 2
        rm -Force -Recurse (Join-Path $Env:WINDIR 'SoftwareDistribution\Download') 
      };
      pre    = { Test-Path (Join-Path $Env:WINDIR 'SoftwareDistribution\Download') };
      post   = { 1 }; }
  @{ name    =   'remove_windows_installer_patchcache_files';
      script = { 
        Get-Service *inst* | Stop-Service -Verbose -ea 0
        Sleep 2
        rm -Force -Verbose -recurse (Join-Path $Env:WINDIR 'Installer\$PatchCache$\*') 
      };
      pre    = { Test-Path (Join-Path $Env:WINDIR 'Installer\$PatchCache$') };
      post   = { 1 }; }
   @{ name    =   'purge_recycle_bin'; 
      script = {
        if (Test-Path ($recycleBin = Join-Path $Env:SystemDrive '$Recycle.bin') ) {
          ;
        }
        elseif (Test-Path ($recycleBin = Join-Path $Env:SystemDrive "Recycler") ) { 
          ;
        }
        ls -ea 0 -Force (Join-Path $recycleBin "*\*") | %{ 
          rm -ea 0 -Recurse -Force -Verbose $_ 
        }
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'disable_indexing_on_local_drives';
      script = {
        Gwmi Win32_LogicalDisk | ?{ $_.DriveType -eq 3 } | %{
          Get-WmiObject Win32_Volume -Filter "DriveLetter='$($_.DeviceID)'" | ?{
            $_.IndexingEnabled
          } | %{
            $_ | Set-WmiInstance -Arguments @{IndexingEnabled=$False} -Verbose
          }
        }
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'start_service_pack_cleanup_tool'; 
      script = { Start-Process vsp1cln.exe -ArgumentList '/quiet' -Wait -NoNewWindow };
      pre    = { Get-Command 'vsp1cln.exe' -ea 1 };
      post   = { 1 }; }
  @{ name    =   'start_component_cleanup_tool'; 
      script = { Start-Process compcln.exe -argumentlist '/quiet' -wait -NoNewWindow };
      pre    = { Get-Command 'compcln.exe' -ea 1 };
      post   = { 1 }; }
  @{ name    =   'start_sfc_scannow';
      script = { Start-SFC -scannow -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'start_defrag_on_local_drives';
      script = { 
        Get-Service defragsvc -ea 0 | Set-Service -StartupType Manual -PassThru | Start-Service -Verbose
        Gwmi Win32_LogicalDisk | ?{ $_.DriveType -eq 3 } | %{
          $DriveLetter = $_.DeviceId
          Start-Process defrag.exe -ArgumentList @('-f','-v',$DriveLetter) -wait -NoNewWindow
        }
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'start_contig_on_local_drives';
      script = {
        cp (Join-Path $Env:IPBaseDir "SysInternals\contig.exe") "$Env:OLBIN" -Verbose -Force
        reg.exe add HKCU\SOFTWARE\Sysinternals\C /v EulaAccepted /t REG_DWORD /d 1 /f
        Gwmi Win32_LogicalDisk | ?{ $_.DriveType -eq 3 } | %{ & contig.exe -a -s "$($_.DeviceID)" }
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'start_contig_on_local_drives_special_ntfs_files';
      script = {
        cp (Join-Path $Env:IPBaseDir "SysInternals\contig.exe") "$Env:OLBIN" -Verbose -Force
        reg.exe add HKCU\SOFTWARE\Sysinternals\C /v EulaAccepted /t REG_DWORD /d 1 /f
        Gwmi Win32_LogicalDisk | ?{ $_.DriveType -eq 3 } | %{ 
          $Drive = $_.DeviceID
          '$mft','$LogFile','$Volume','$Attrdef','$Bitmap','$Boot','$BadClus','$Secure','$UpCase','$Extend' | %{
            & contig.exe -v -s (Join-Path $Drive $_) 
          }
        }
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'start_precompact'; 
      script = { 
        cp -force -verbose (@(gcm precompact.exe)[0].Definition) $Env:TEMP
        Start-Process "$Env:TEMP\precompact.exe" -argumentlist '-silent' -wait -NoNewWindow
        rm -Force "$Env:TEMP\precompact.exe" -Verbose
      };
      pre    = { Get-Command 'precompact.exe' -ea 1 };
      post   = { 1 }; }
  @{ name    =   'install_sdelete';
      script = { 
        reg.exe add 'HKCU\SOFTWARE\Sysinternals\SDelete' /v EulaAccepted /t REG_DWORD /d 1 /f
        cp (Join-Path $Env:IPBaseDir "SysInternals\sdelete.exe") "$Env:OLBIN" -Verbose -Force
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'sdelete_clean_free_space_on_local_drives';
      script = { 
        Gwmi Win32_LogicalDisk | ?{ $_.DriveType -eq 3 } | %{ 
          Start-Process 'sdelete.exe' -ArgumentList @('-a', '-c', '-r', '-z', '-p', '2', "$($_.DeviceID)\") -Wait -NoNewWindow
        }
      };
      pre    = { 1 };
      post   = { 1 }; }
  # @{ name    =   'export_logs';
  #     script = { Export-Logs };
  #     pre    = { 1 };
  #     post   = { 1 }; }
  @{ name    =   'show_w32tm_status';
      script = { Show-W32tmStatus -Status };
      pre    = { 1 };
      post   = { 1 }; }
      # @{ name    =   'prepare_sysprep_audit_generalize';
      #     script = { & "$Env:WINDIR\System32\SysPrep\sysprep.exe" -reboot -audit -generalize -quiet -unattend:(Join-Path $Env:IPBaseDir "conf\sysprep\unattend.xml") };
      #     pre    = { 1 };
      #     post   = { 1 }; }
),


# Stage 3
@(
  @{ name    =   'restart_for_stage_3';
      script = { & shutdown.exe -r -t 2 };
      pre    = { 1 };
      post   = { 1 }; }
),


# Stage 4
@(
  @{ name    =   'sync_ntp_time_stage_4';
      script = { Sync-W32Time };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'deregister_imageprep_startup_script_final';
      script = { Get-StartupCommand | ?{ $_.Command -imatch "Invoke-ImagePrep.cmd" } | Uninstall-StartupCommand -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'eject_cdrom_devices';
      script = { Dismount-CDROMDevice -All -Verbose };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'clear_event_logs';
      script = { Get-EventLog -LogName * | %{ Clear-EventLog -LogName $_.Log -Verbose } };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'gpupdate_update_force';
      script = { gpupdate.exe /force /boot /sync };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   'enable_pagefile_properties_for_xp';
      script = { 
        $pfs_i = 0.3 * ((gwmi win32_computersystem).TotalPhysicalMemory / 1MB)
        New-Pagefile -Pagefile 'c:\pagefile.sys' -InitialSize $pfs_i -ea 0
      };
      pre    = { $os = gwmi win32_operatingsystem; if (-not($os.version -imatch '^5\.1')){ throw 'Not on Windows XP/2003.' } };
      post   = { 1 }; }
  @{ name    =   'enable_automatic_managed_pagefile';
      script = { Enable-AutomaticManagedPagefile -verbose };
      pre    = { $os = gwmi win32_operatingsystem; if ($os.version -imatch '^5\.1'){ throw 'On Windows XP/2003.' } };
      post   = { 1 }; }
  @{ name    =   "register_imageprep_startup_script_guest_tools-$(get-date -uformat %s)";
      script = { 
        $ipWrapper="$Env:OLBIN\Invoke-ImagePrep.cmd"
        $ip=([System.IO.FileInfo](Resolve-Path (Join-Path $Env:IPBaseDir "BootStrap/Invoke-ImagePrep.cmd")).ProviderPath).FullName;
        Write-Verbose "Creating cmd $ipWrapper to $ip"
        "start /min `"ImagePrep`" $ip" | Out-File -Verbose -Force -Encoding ASCII -PSPath $ipWrapper;
        Install-GlobalLogonScript $ipWrapper -Verbose;
        Get-StartupCommand | ?{ $_.Caption -imatch 'image' } | Uninstall-StartupCommand
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =  "install_vm_guest_tools_packages-$(get-date -uformat %s)";
      script = { 
        cp -Verbose -Recurse -Force "$Env:IPBaseDir\Modules\CDRom\"         "$PSHome\Modules\"
        cp -Verbose -Recurse -Force "$Env:IPBaseDir\Modules\XenTools\"      "$PSHome\Modules\"
        cp -Verbose -Recurse -Force "$Env:IPBaseDir\Modules\VMWareTools\"   "$PSHome\Modules\"
        cp -Verbose -Recurse -Force "$Env:IPBaseDir\Modules\HyperVIC\"      "$PSHome\Modules\"
        cp -Verbose -Recurse -Force "$Env:IPBaseDir\Modules\VMGuestTools\"  "$PSHome\Modules\"
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   "register_guest_tools_installer_startup_script-$(get-date -uformat %s)";
      script = { 
        cp -Verbose -Force "$Env:IPBaseDir\Modules\VMGuestTools\Tests\Install-VMGuestTools.ps1" "$Env:OLBIN" 
        cp -Verbose -Force "$Env:IPBaseDir\Modules\VMGuestTools\Tests\Install-VMGuestTools.cmd" "$Env:OLBIN" 
        Install-GlobalLogonScript "$Env:OLBIN\Install-VMGuestTools.cmd" -Verbose 
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   "guest_delete_window_position_key-$(get-date -uformat %s)";
      script = { 
        $Local:ErrorActionPreference = "CONTINUE"
        & reg.exe add     "HKCU\Console" /v WindowSize     /t  0x00400090   /d REG_DWORD /f
        & reg.exe delete  "HKCU\Console" /v WindowPosition /f
      };
      pre    = { 1 };
      post   = { 1 }; }
  @{ name    =   "set_powershell_local_machine_execution_policy_remotesigned-$(get-date -uformat %s)";
      script = { 
        try {
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine -Force -Verbose -ErrorVariable SEPEV
        } catch {
          if ( -not($SEPEV -imatch 'updated.*successfully') ) {
            throw
          }
        }
      };
      pre    = { -not( ($cep = Get-ExecutionPolicy -Scope LocalMachine) -imatch 'RemoteSigned' ) };
      post   = { 1 }; }
)

# Stage 4
@(
  @{ name    =   'restart_for_stage_4';
      script = { & shutdown.exe -r -t 2 };
      pre    = { 1 };
      post   = { 1 }; }
)



# TODO
#  Validate Service Packs are installed
#  Validate CPU types are installed
#  Vista - tzutil not installed

#  @{ name    =   "ensure_guest_tools_install_cd_injected-$(get-date -uformat %s)";
#      script = { if ( -not( Get-CDROMDevice -VolumeLabelFilter 'XenServer Tools' ) ) { throw 'XenServer Tools CD not inserted' } };
#      pre    = { 1 };
#      post   = { 1 }; }
#  @{ name    =   "shutdown_post_guest_tools_install-$(get-date -uformat %s)";
#      script = { shutdown -s -t 2 };
#      pre    = { 1 };
#      post   = { 1 }; }
      # @{ name    =   'prepare_sysprep_oobe_generalize';
      #     script = { & "$Env:WINDIR\System32\SysPrep\sysprep.exe" -reboot -oobe -generalize -quiet -unattend:(Join-Path $Env:IPBaseDir "conf\sysprep\unattend.xml") };
      #     pre    = { 1 };
      #     post   = { 1 }; }


#   @{ name='test_1'; script={ Write-Host "Test 1" }; pre={ throw      "pre 1" }; }
#   @{ name='test_2'; script={ Write-Host "Test 2" }; pre={ Write-Host "pre 2" }; post={ throw      "post 2"; }; }
#   @{ name='test_3'; script={ Write-Host "Test 3" }; pre={ Write-Host "pre 3" }; post={ Write-Host "post 3"; }; }
#   @{ name='test_4'; script={ Write-Host "Test 4" }; pre={ Write-Host "pre 4" }; post={ Write-Host "post 4"; }; }
#   @{ name='test_5'; script={ Write-Host "Test 5" }; pre={ Write-Host "pre 5" }; post={ Write-Host "post 5"; }; }

# vim:
# sw=2:ts=2:et:foldexpr=getline(v\:lnum)=~'^\\s*$'&&getline(v\:lnum-1)=~'^\\s*$'&&getline(v\:lnum+1)=~'\\S'?'<1'\:1:fdm=expr:filetype=ps1:ff=dos:fenc=ASCII

