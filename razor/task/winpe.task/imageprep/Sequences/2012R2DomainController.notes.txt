[CmdletBinding()]
param(
    [parameter(mandatory=$true)]
    [string] $ASFControllerName,
    [string] $DomainName = "bvt.local"
    )

Import-module servermanager


Write-Host "Try and resolve ASF controller server Name: $ASFControllerName"

$hostEntry = [Net.Dns]::GetHostByName($ASFControllerName)

$IPAddress = $hostEntry.AddressList[0]

Write-Host "ASF controller server IPAddress: $IPAddress"

Add-DnsServerResourceRecordA -Name $ASFControllerName -ZoneName $DomainName -AllowUpdateAny -IPv4Address $ipaddress -TimeToLive 01:00:00

=======================

<#
.SYNOPSIS
Adds dns server tp ipv4 and ipv6 interfaces

Copyright (c) Citrix Systems, Inc. All Rights Reserved.

.DESCRIPTION

.EXAMPLE

#>

[CmdletBinding()]
param(
    [parameter(mandatory=$true)]
    [string] $DNSServerName
    )




$ErrorActionPreference = "Stop"

function Set-DnsServer
{
  param
  (
   [Parameter(Mandatory=$true)]
   [string]$DnsIpAddress
  )
  # Function must be executed on the workstation machine
  # Logging information about the function
  Write-Verbose "Setting DNS server to $dnsIpAddress"

  # Checking to see if the passed Ip address is valid and if it is an Ipv6 address then using netsh to add the dnsserver


  Write-Debug "Searching for adapters with assigned IPs"
  $adapters = get-wmiobject win32_networkadapterconfiguration | where{$_.IPEnabled -eq "TRUE"}
  if ($adapters -eq $null)
  {
    throw "Could not find any network adapters with assigned IPs"
  }

  $Ipv6Address = $false



  [System.Net.IPAddress]$ip = $null
  if([System.Net.IPAddress]::TryParse($dnsIpAddress,[ref]$ip))
  {
    if(($ip.AddressFamily -eq 'InterNetworkV6'))
    {
      $Ipv6Address = $true
    }
  }
  else
  {
    throw "Invalid Ip Address Passed"
  }


  foreach ($adapter in $adapters)
  {
    Write-Debug "Setting DNS server"
    $connection = Get-WmiObject win32_networkadapter | where {$_.Index -eq $adapter["Index"]}
    [String[]]$ipAddresses = $adapter["IPAddress"]
    $Ipv6Enabled = $false
    $Ipv4Enabled = $false

    foreach($ipAdd in $ipAddresses)
    {
      [System.Net.IPAddress]$outAddress = $null
      if([System.Net.IPAddress]::TryParse($ipAdd,[ref]$outAddress))
      {
        if($outAddress.AddressFamily -eq 'InterNetworkV6')
        {
          $Ipv6Enabled = $true
        }
        elseif($outAddress.AddressFamily -eq 'InterNetwork')
        {
          $Ipv4Enabled = $true
        }
      }
    }


    if($Ipv6Address -and $Ipv6Enabled)
    {
      Write-Debug "$dnsIpAddress is an Ipv6 address. Thus using netsh to add the DNS Server"
      if($connection)
      {
        [string]$res = netsh interface ipv6 add dnsserver $connection['NetConnectionID'] $ip.ToString() index=1
        if($res.Contains("The object is already in the list"))
        {
          Write-Debug "Ip Address $ip was already on the DNS Server list. Promoting it to primary"
          $del = netsh interface ipv6 delete dnsservers $connection['NetConnectionID'] $ip.toString()
          $add = netsh interface ipv6 add dnsserver $connection['NetConnectionID'] $ip.ToString() index=1
          Write-Debug "Ip Address $ip successfully added to the DNS Server list and made primary"
        }
      }

    }

    if(-not($Ipv6Address) -and $Ipv4Enabled)
    {
      $result = $adapter.SetDNSServerSearchOrder($dnsIpAddress).ReturnValue
      if ($result -ne 0 -and $result -ne 1)
      {
        throw "Could not set DNS server, error is $result, for more information see http://msdn.microsoft.com/en-us/library/aa393295(VS.85).aspx"
      }
    }


  }
}


Write-Host "Try and resolve DNS server Name: $DNSServerName"
$addresses = [Net.Dns]::GetHostEntry($DNSServerName) | % {$_.AddressList} | where {-not($_.IsIPv6LinkLocal)}

$addresses | % {Set-DnsServer -DnsIpAddress $_.IPAddressToString}
ipconfig /flushdns
ipconfig /all


================================

<#
.SYNOPSIS
Installs Active Directory(AD) domain services and DNS

Copyright (c) Citrix Systems, Inc. All Rights Reserved.

.DESCRIPTION
Runs dcpromo.exe supplying an answer file containing configuration settings, and installs 
AD Domain Services and DNS

Answer file must be manually configured, and the 'SafeModeAdminPassword' option resets to "" after each install

.EXAMPLE
New-DomainController -AnswerFile ADAnswers.txt
#>

[CmdletBinding()]
param(
    [parameter(mandatory=$true)]
    [string] $UserName, # The ASF install folder
    [string] $Password = "***REMOVED***"
    )

Import-Module ActiveDirectory

  $dnsroot = '@' + (Get-ADDomain).DNSRoot
$accountPassword = (ConvertTo-SecureString $Password -AsPlainText -force)

New-ADUser -AccountPassword $accountPassword -ChangePasswordAtLogon $false -DisplayName $UserName  -Enabled $true -name $UserName -Verbose

============================


<#
.SYNOPSIS
Standard mechanism to let a person know what is expected and read their input
.Parameter IntroText
string to be shown to the user
.Parameter Vars
hashtable containing the variable to set and optionally some prompt for the user and a default
#>

[CmdletBinding()]
param(
    ##    [parameter(mandatory=$true)]
    [string] $DomainName = "bvt.local", # The ASF install folder
    [string] $Password = "***REMOVED***"
    )

Import-module ActiveDirectory

Test-ADDSDomainControllerInstallation -domainname $DomainName -safemodeadministratorpassword (convertto-securestring `
    $Password -asplaintext -force) -Force -Verbose

==============================================


<#
.SYNOPSIS
Standard mechanism to let a person know what is expected and read their input
.Parameter IntroText
string to be shown to the user
.Parameter Vars
hashtable containing the variable to set and optionally some prompt for the user and a default
#>

[CmdletBinding()]
param(
    [string] $DomainName = "bvt.local", # The ASF install folder
    [string] $Password = "***REMOVED***",
    [switch] $NoReboot
    )

Import-module servermanager

Get-WindowsFeature AD-Domain-Services | fl *

Add-WindowsFeature AD-Domain-Services,rsat-adds -includeallsubfeature

Get-WindowsFeature AD-Domain-Services | fl *

try
{
  # Create a new forest which creates a root domain
  if($NoReboot)
  {
    Install-addsforest -domainname $DomainName -safemodeadministratorpassword (convertto-securestring `
        $Password -asplaintext -force) -NoRebootOnCompletion -Force -Verbose
  }
  else
  {
    Install-addsforest -domainname $DomainName -safemodeadministratorpassword (convertto-securestring `
        $Password -asplaintext -force) -Force -Verbose
  }
}
catch
{
  throw "Failed to create domain controller for $DomainName"
}

Write-Host "Try and resolve ASF controller server Name: $ASFControllerName"

$hostEntry = [Net.Dns]::GetHostByName($DNSServerName)

$IPAddress = $hostEntry.AddressList[0]

Write-Host "Try and resolve DNS server Name: $DNSServerName"


================================


  param
  (
   [parameter(mandatory=$true)][string]$DomainDnsName,
   [int]$Wait = 30 
  )

  $adserver="$env:COMPUTERNAME.$DomainDnsName"
$hostRec = [Net.Dns]::GetHostByName($ADserver)
$ipStr = $null
if($hostRec -ne $null -and $hostRec.AddressList.Count -ge 1)
{
  $ipStr = $hostRec.AddressList[0].IPAddressToString

}
else
{
  throw "Failed to lookup $ADserver"
}

$ldap = "_ldap._tcp.dc._msdcs.$DomainDnsName"

while($true)
{
  $resolved = Resolve-DnsName -Type all -Name $ldap -Server $ipStr

  Write-Output $resolved

  # check for A record
  $aRec = ($resolved | where {$_.Type -eq "A"})

  #Resolve-DnsName -Type all -Name bvt.local
  if($aRec -eq $null)
  {
    Write-Host "$ldap can not be resolved yet. Flush dns then Sleep $Wait secs and retry"
    ipconfig /flushdns
    sleep $Wait
  }
  else
  {
    Write-Host "$ldap can now be resolved"
    break
  }
}

write-host "sleep $Wait secs to make sure"

sleep $Wait
ipconfig /flushdns

