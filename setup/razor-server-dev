#!/bin/bash

# SYNOPSIS
#   Build puppetlabs/razor-server from source.

source defaults.sh
source razor-winpe.sh # Needed for RAZOR_DB_PASSWORD

distro=$(lsb_release -is | tr 'A-Z' 'a-z')
case "$distro" in
  debian|ubuntu)
    source "${DIR}/${SCRIPT##*/}.$distro"
  ;;
  *)
    echo "Unsupported distribution '$distro'.";
  ;;
esac

version=
working_dir='/usr/src'
razor_server_url='https://github.com/puppetlabs/razor-server/archive/0.15.0.tar.gz'
url='https://github.com/puppetlabs/razor-server.git'
RAZOR_ROOT="${RAZOR_ROOT:-/usr/src/razor-server}"

while getopts ":o:w:u:" opt; do
  case $opt in
    o) version="$OPTARG"
    ;;
    w) working_dir="$OPTARG"
    ;;
    u) url="$OPTARG"
    ;;
  esac
done

# aptitude install razor-server
# 500 http://apt.puppetlabs.com/ sid/main amd64 Packages

mkdir -p /var/lib/razor
adduser razor --home /var/lib/razor --shell /bin/false --system || true
adduser razor src

set -xv

# Test Database access
RAZOR_DB_PASSWORD="${RAZOR_DB_PASSWORD:-$(die "RAZOR_DB_PASSWORD is not set")}"
echo "localhost:5432:razor:razor:$RAZOR_DB_PASSWORD" > /var/lib/razor/.pgpass
chmod 0600 /var/lib/razor/.pgpass
sudo -u razor psql -U razor razor -w -l

cd "${working_dir:-/usr/src/}"

razor_file="razor-server-${razor_server_url##*/}"
razor_root="$working_dir/${razor_file%.tar.gz}"

if [[ ! -d $razor_root ]]; then
  wget -c "$razor_server_url" -O "$razor_file"
  mkdir -pv "$razor_root"
  tar xf "$razor_file" -C "$razor_root/.."
fi

[[ -e "$RAZOR_ROOT" ]] && rm -f "$RAZOR_ROOT"
ln -svf "$razor_root/" "$RAZOR_ROOT"

cd "$RAZOR_ROOT"

# pull from git master branch
# [[ -d razor-server ]] || git clone "$url"
# cd razor-server
# git checkout master
# git pull
# [[ $version ]] && git checkout "$version"

jruby_required_ver=$( grep -i '^ruby' "$razor_root/Gemfile" | \
  sed -r 's/,\ +/\n/g'  | \
  awk '/engine_version/{print $3}' |\
  sed -r "s/'//g" )

# jruby_required_ver='1.7.8'

source ~/.profile # init for rbenv

if ! rbenv versions | grep -iq jruby-"$jruby_required_ver"; then
  CONFIGURE_OPTS="--disable-install-doc" \
  CFLAGS="-march=native -Os" \
    rbenv install -f "jruby-$jruby_required_ver"
fi

rbenv rehash && rbenv local jruby-"$jruby_required_ver"

# function jruby {
#   jruby=$( rbenv which jruby | grep -i jruby-"$jruby_required_ver" )
#   "$jruby" "$@"
# }

function gem {
  jruby -S gem "$@"
}

gem list | grep -iq '^bundler' || \
  gem install bundler

bundle clean --force || true
bundle check || true
bundle install

